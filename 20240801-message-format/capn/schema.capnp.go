// Code generated by capnpc-go. DO NOT EDIT.

package capn

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Employee capnp.Struct

// Employee_TypeID is the unique identifier for the type Employee.
const Employee_TypeID = 0xb898665e174aad22

func NewEmployee(s *capnp.Segment) (Employee, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Employee(st), err
}

func NewRootEmployee(s *capnp.Segment) (Employee, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Employee(st), err
}

func ReadRootEmployee(msg *capnp.Message) (Employee, error) {
	root, err := msg.Root()
	return Employee(root.Struct()), err
}

func (s Employee) String() string {
	str, _ := text.Marshal(0xb898665e174aad22, capnp.Struct(s))
	return str
}

func (s Employee) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Employee) DecodeFromPtr(p capnp.Ptr) Employee {
	return Employee(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Employee) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Employee) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Employee) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Employee) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Employee) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Employee) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Employee) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Employee) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Employee) Position() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Employee) HasPosition() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Employee) PositionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Employee) SetPosition(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Employee_List is a list of Employee.
type Employee_List = capnp.StructList[Employee]

// NewEmployee creates a new list of Employee.
func NewEmployee_List(s *capnp.Segment, sz int32) (Employee_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Employee](l), err
}

// Employee_Future is a wrapper for a Employee promised by a client call.
type Employee_Future struct{ *capnp.Future }

func (f Employee_Future) Struct() (Employee, error) {
	p, err := f.Future.Ptr()
	return Employee(p.Struct()), err
}

type Result capnp.Struct

// Result_TypeID is the unique identifier for the type Result.
const Result_TypeID = 0x9ca046036e71d3c5

func NewResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Result(st), err
}

func NewRootResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Result(st), err
}

func ReadRootResult(msg *capnp.Message) (Result, error) {
	root, err := msg.Root()
	return Result(root.Struct()), err
}

func (s Result) String() string {
	str, _ := text.Marshal(0x9ca046036e71d3c5, capnp.Struct(s))
	return str
}

func (s Result) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Result) DecodeFromPtr(p capnp.Ptr) Result {
	return Result(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Result) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Result) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Result) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Result) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Result) Employee() (Employee, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Employee(p.Struct()), err
}

func (s Result) HasEmployee() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Result) SetEmployee(v Employee) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEmployee sets the employee field to a newly
// allocated Employee struct, preferring placement in s's segment.
func (s Result) NewEmployee() (Employee, error) {
	ss, err := NewEmployee(capnp.Struct(s).Segment())
	if err != nil {
		return Employee{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Result) Scores() (capnp.UInt64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.UInt64List(p.List()), err
}

func (s Result) HasScores() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Result) SetScores(v capnp.UInt64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewScores sets the scores field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s Result) NewScores(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Result_List is a list of Result.
type Result_List = capnp.StructList[Result]

// NewResult creates a new list of Result.
func NewResult_List(s *capnp.Segment, sz int32) (Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Result](l), err
}

// Result_Future is a wrapper for a Result promised by a client call.
type Result_Future struct{ *capnp.Future }

func (f Result_Future) Struct() (Result, error) {
	p, err := f.Future.Ptr()
	return Result(p.Struct()), err
}
func (p Result_Future) Employee() Employee_Future {
	return Employee_Future{Future: p.Future.Field(0, nil)}
}

type Message capnp.Struct

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xdb954c3408a28eb6

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xdb954c3408a28eb6, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Message) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Message) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Message) Result() (Result_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Result_List(p.List()), err
}

func (s Message) HasResult() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Message) SetResult(v Result_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewResult sets the result field to a newly
// allocated Result_List, preferring placement in s's segment.
func (s Message) NewResult(n int32) (Result_List, error) {
	l, err := NewResult_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Result_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}

const schema_fd74a990b04176d4 = "x\xdal\x91\xbfJ+A\x18\xc5\xcf\x99M\xeeM " +
	"\xf7\xde\xcd]\xc1F\x1bQ0b\xd4@\x0aI\x13\x15" +
	"\x15\x09\x0a\x19\x1f@X\xc2\xa8\x81\xec\x1f3\xd1`\xe5" +
	"\x1b\x88M\xc0BA\xed,\x04+\xf1\x05,\xb4T+" +
	"}\x96\xb0\xb2Kb$lw\xe6pf~\xdf\x9c\xcf" +
	"|^J\x14\xfex\x02B\x8e%\x7f\x05Oo\x07\xae" +
	"\xb1~u\x81\xec\x7f\x06\xefG\xcb\xf7g\xb7\xad.\x92" +
	"\xe27`\x8d\xf3\xc5\xca1TSl\x83\xc1\xc4]e" +
	"tg\xf7\xfc1.\xdb\xe1\x87u\x1de/\xa3\xec\xc3" +
	"\xe9M\xaa\xb8\xd9\xf9\x8c\xcbv\xf9j\xa5#\x95\x14m" +
	"\xe4\x83\x9a\xed\xbb\xf3\xba\xb6/\x94c\xcf\x85\x07\xbf\xb4" +
	"\xad\xf4a\xa3\x05TI\x992\x12@\x82@6W\x01" +
	"\xe4\xb4AY\x14\xcc\x92#\x0c\xcdB\x09\x90\xb3\x06\xe5" +
	"\x86`\xa0\x1c\xbf\xe1\x1d+\x05\x80\xe6``\x90&X" +
	"\xd65\xaf\xa94\xff\x82U\x83LC\x842\x0e\xbf\x16" +
	"=c(5\xc4\x9f\x01\xe4\xa4A\xb9\xf0\x83\x9f\xaf\xf4" +
	"\xf8\x8b\x82\xff\\\xdbQ\xcc@0\x03\x06\xbe\xa7\xeb\xad" +
	"\xba\xe7\x86\xc3\xf4\xbd\x18\xd8\x96\xd2\xda\xde\xe30k%" +
	"\x8eU\xea\x15\xb0*x\xe2D\xf7\xbeq\xe5f\xd4Y" +
	"\xffw\xe6`\xb5`h~\x05\x00\x00\xff\xffKLt" +
	"\x91"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_fd74a990b04176d4,
		Nodes: []uint64{
			0x9ca046036e71d3c5,
			0xb898665e174aad22,
			0xdb954c3408a28eb6,
		},
		Compressed: true,
	})
}
