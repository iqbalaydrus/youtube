services:
  haproxy:
    image: haproxy:3.2.1
    restart: always
    user: root
    ports:
      - "127.0.0.1:7000:7000"
      - "127.0.0.1:9001:9001"
      - "127.0.0.1:9000:9000"
    volumes:
      - ./config/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
      - ./config/certs/ca/ca.crt:/etc/ssl/ca.crt
      - ./config/certs/haproxy:/etc/ssl/certs
      - /etc/localtime:/etc/localtime
    environment:
      TZ: Asia/Jakarta
  etcd1:
    image: bitnami/etcd:3.6.1
    restart: always
    volumes:
      - ./data/etcd1:/bitnami/etcd
      - ./config/certs/etcd1:/etc/ssl/certs
      - ./config/certs/ca/ca.crt:/etc/ssl/ca.crt
      - /etc/localtime:/etc/localtime
    environment:
      TZ: Asia/Jakarta
      ETCD_NAME: etcd1
      ETCD_ROOT_PASSWORD: wie3Uof0beudathe
      ETCD_CERT_FILE: /etc/ssl/certs/server.crt
      ETCD_KEY_FILE: /etc/ssl/certs/server.key
      ETCD_PEER_CERT_FILE: /etc/ssl/certs/server.crt
      ETCD_PEER_KEY_FILE: /etc/ssl/certs/server.key
      ETCD_PEER_TRUSTED_CA_FILE: /etc/ssl/ca.crt
      ETCD_PEER_CLIENT_CERT_AUTH: "true"
      ETCD_LISTEN_CLIENT_URLS: https://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: https://etcd1:2379
      ETCD_LISTEN_PEER_URLS: https://0.0.0.0:2380
      ETCD_INITIAL_ADVERTISE_PEER_URLS: https://etcd1:2380
      ETCD_INITIAL_CLUSTER_TOKEN: iqbal-etcd-cluster
      ETCD_INITIAL_CLUSTER: etcd1=https://etcd1:2380,etcd2=https://etcd2:2380,etcd3=https://etcd3:2380
  etcd2:
    image: bitnami/etcd:3.6.1
    restart: always
    volumes:
      - ./data/etcd2:/bitnami/etcd
      - ./config/certs/etcd2:/etc/ssl/certs
      - ./config/certs/ca/ca.crt:/etc/ssl/ca.crt
      - /etc/localtime:/etc/localtime
    environment:
      TZ: Asia/Jakarta
      ETCD_NAME: etcd2
      ETCD_ROOT_PASSWORD: wie3Uof0beudathe
      ETCD_CERT_FILE: /etc/ssl/certs/server.crt
      ETCD_KEY_FILE: /etc/ssl/certs/server.key
      ETCD_PEER_CERT_FILE: /etc/ssl/certs/server.crt
      ETCD_PEER_KEY_FILE: /etc/ssl/certs/server.key
      ETCD_PEER_TRUSTED_CA_FILE: /etc/ssl/ca.crt
      ETCD_PEER_CLIENT_CERT_AUTH: "true"
      ETCD_LISTEN_CLIENT_URLS: https://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: https://etcd2:2379
      ETCD_LISTEN_PEER_URLS: https://0.0.0.0:2380
      ETCD_INITIAL_ADVERTISE_PEER_URLS: https://etcd2:2380
      ETCD_INITIAL_CLUSTER_TOKEN: iqbal-etcd-cluster
      ETCD_INITIAL_CLUSTER: etcd1=https://etcd1:2380,etcd2=https://etcd2:2380,etcd3=https://etcd3:2380
  etcd3:
    image: bitnami/etcd:3.6.1
    restart: always
    volumes:
      - ./data/etcd3:/bitnami/etcd
      - ./config/certs/etcd3:/etc/ssl/certs
      - ./config/certs/ca/ca.crt:/etc/ssl/ca.crt
      - /etc/localtime:/etc/localtime
    environment:
      TZ: Asia/Jakarta
      ETCD_NAME: etcd3
      ETCD_ROOT_PASSWORD: wie3Uof0beudathe
      ETCD_CERT_FILE: /etc/ssl/certs/server.crt
      ETCD_KEY_FILE: /etc/ssl/certs/server.key
      ETCD_PEER_CERT_FILE: /etc/ssl/certs/server.crt
      ETCD_PEER_KEY_FILE: /etc/ssl/certs/server.key
      ETCD_PEER_TRUSTED_CA_FILE: /etc/ssl/ca.crt
      ETCD_PEER_CLIENT_CERT_AUTH: "true"
      ETCD_LISTEN_CLIENT_URLS: https://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: https://etcd3:2379
      ETCD_LISTEN_PEER_URLS: https://0.0.0.0:2380
      ETCD_INITIAL_ADVERTISE_PEER_URLS: https://etcd3:2380
      ETCD_INITIAL_CLUSTER_TOKEN: iqbal-etcd-cluster
      ETCD_INITIAL_CLUSTER: etcd1=https://etcd1:2380,etcd2=https://etcd2:2380,etcd3=https://etcd3:2380
  postgres1:
    # this public spilo image doesn't have timescaledb community edition
    # to have one, you need to build the image yourself
    image: ghcr.io/zalando/spilo-17:4.0-p2
    restart: always
    hostname: postgres1
    volumes:
      - ./data/postgres1:/home/postgres/pgdata
      - ./config/certs/postgres1:/etc/ssl/certs
      - ./config/certs/ca/ca.crt:/etc/ssl/ca.crt
      - ./config/spilo:/spilo_config
      - /etc/localtime:/etc/localtime
    environment:
      TZ: Asia/Jakarta
      SCOPE: iqbal-spilo-cluster
      ETCD3_HOSTS: etcd1:2379,etcd2:2379,etcd3:2379
      ETCD3_PROTOCOL: https
      ETCD3_CACERT: /etc/ssl/ca.crt
      # it's better to set up a new user for this
      ETCD3_USERNAME: root
      ETCD3_PASSWORD: wie3Uof0beudathe
      SSL_CA_FILE: /etc/ssl/ca.crt
      SSL_CERTIFICATE_FILE: /etc/ssl/certs/server.crt
      SSL_PRIVATE_KEY_FILE: /etc/ssl/certs/server.key
# open bug at spilo: https://github.com/zalando/spilo/issues/889
#      SSL_RESTAPI_CA_FILE: /etc/ssl/ca.crt
#      SSL_RESTAPI_CERTIFICATE_FILE: /etc/ssl/certs/server.crt
#      SSL_RESTAPI_PRIVATE_KEY_FILE: /etc/ssl/certs/server.key
      RESTAPI_CONNECT_ADDRESS: postgres1
      USE_WALG_BACKUP: "true"
      WAL_S3_BUCKET: iqbal-spilo-backup
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: ohc6OhbahC3Oobai
      AWS_ENDPOINT: https://haproxy:9000
      WALG_S3_CA_CERT_FILE: /etc/ssl/ca.crt
      PGPASSWORD_SUPERUSER: iecie8Bo7gakair4
      PGPASSWORD_ADMIN: ioph0Eex6Oogh1Ah
      PGPASSWORD_STANDBY: aeB8oong0paiv0er
      PGBOUNCER_CONFIGURATION: |
        [databases]
        * =
        [pgbouncer]
        pidfile = /run/postgresql/pgbouncer.pid
        listen_addr = *
        listen_port = 6432
        unix_socket_dir = /run/postgresql
        unix_socket_mode = 0755
        auth_query = SELECT rolname, rolpassword FROM pg_catalog.set_config('application_name', 'pgbouncer authentication', false) CROSS JOIN pg_catalog.pg_authid WHERE rolname = $1
        auth_type = hba
        auth_hba_file = /spilo_config/pg_hba.conf
        auth_user = postgres
        auth_file = /spilo_config/userlist.txt
        client_tls_sslmode = prefer
        client_tls_key_file = /etc/ssl/certs/server.key
        client_tls_cert_file = /etc/ssl/certs/server.crt
        client_tls_ca_file = /etc/ssl/ca.crt
        server_tls_ca_file = /etc/ssl/ca.crt
        default_pool_size = 75
        ignore_startup_parameters = extra_float_digits, options
        max_client_conn = 500
        pool_mode = transaction
        server_reset_query = DISCARD ALL
        stats_users = monitoring
      SPILO_CONFIGURATION: |
        bootstrap:
          dcs:
            postgresql:
              parameters:
                password_encryption: scram-sha-256
          initdb:
            - auth: scram-sha-256
            - encoding: UTF8
            - data-checksums
        postgresql:
          pg_hba:
            - local     all          all                       trust
            - local     replication  standby                   trust
            - hostssl   replication  standby     all           scram-sha-256
            - hostssl   all          +zalandos   127.0.0.1/32  pam
            - hostssl   all          +zalandos   ::1/128       pam
            - host      all          all         127.0.0.1/32  scram-sha-256
            - host      all          all         ::1/128       scram-sha-256
            - hostssl   all          +zalandos   all           pam
            - hostssl   all          all         all           scram-sha-256
            - hostnossl all          all         all           reject
  postgres1-exporter:
    image: bitnami/postgres-exporter:0.17.1
    restart: always
    environment:
      PG_EXPORTER_AUTO_DISCOVER_DATABASES: "true"
      DATA_SOURCE_NAME: "postgresql://postgres:iecie8Bo7gakair4@postgres1:5432/postgres"
  pgbouncer1-exporter:
    image: prometheuscommunity/pgbouncer-exporter:v0.11.0
    restart: always
    environment:
      PGBOUNCER_EXPORTER_CONNECTION_STRING: "postgres://monitoring:nohsi1thiediePai@postgres1:6432/pgbouncer"
  postgres2:
    # this public spilo image doesn't have timescaledb community edition
    # to have one, you need to build the image yourself
    image: ghcr.io/zalando/spilo-17:4.0-p2
    restart: always
    hostname: postgres2
    volumes:
      - ./data/postgres2:/home/postgres/pgdata
      - ./config/certs/postgres2:/etc/ssl/certs
      - ./config/certs/ca/ca.crt:/etc/ssl/ca.crt
      - ./config/spilo:/spilo_config
      - /etc/localtime:/etc/localtime
    environment:
      TZ: Asia/Jakarta
      SCOPE: iqbal-spilo-cluster
      ETCD3_HOSTS: etcd1:2379,etcd2:2379,etcd3:2379
      ETCD3_PROTOCOL: https
      ETCD3_CACERT: /etc/ssl/ca.crt
      # it's better to set up a new user for this
      ETCD3_USERNAME: root
      ETCD3_PASSWORD: wie3Uof0beudathe
      SSL_CA_FILE: /etc/ssl/ca.crt
      SSL_CERTIFICATE_FILE: /etc/ssl/certs/server.crt
      SSL_PRIVATE_KEY_FILE: /etc/ssl/certs/server.key
# open bug at spilo: https://github.com/zalando/spilo/issues/889
#      SSL_RESTAPI_CA_FILE: /etc/ssl/ca.crt
#      SSL_RESTAPI_CERTIFICATE_FILE: /etc/ssl/certs/server.crt
#      SSL_RESTAPI_PRIVATE_KEY_FILE: /etc/ssl/certs/server.key
      RESTAPI_CONNECT_ADDRESS: postgres2
      USE_WALG_BACKUP: "true"
      WAL_S3_BUCKET: iqbal-spilo-backup
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: ohc6OhbahC3Oobai
      AWS_ENDPOINT: https://haproxy:9000
      WALG_S3_CA_CERT_FILE: /etc/ssl/ca.crt
      PGPASSWORD_SUPERUSER: iecie8Bo7gakair4
      PGPASSWORD_ADMIN: ioph0Eex6Oogh1Ah
      PGPASSWORD_STANDBY: aeB8oong0paiv0er
      PGBOUNCER_CONFIGURATION: |
        [databases]
        * =
        [pgbouncer]
        pidfile = /run/postgresql/pgbouncer.pid
        listen_addr = *
        listen_port = 6432
        unix_socket_dir = /run/postgresql
        unix_socket_mode = 0755
        auth_query = SELECT rolname, rolpassword FROM pg_catalog.set_config('application_name', 'pgbouncer authentication', false) CROSS JOIN pg_catalog.pg_authid WHERE rolname = $1
        auth_type = hba
        auth_hba_file = /spilo_config/pg_hba.conf
        auth_user = postgres
        auth_file = /spilo_config/userlist.txt
        client_tls_sslmode = prefer
        client_tls_key_file = /etc/ssl/certs/server.key
        client_tls_cert_file = /etc/ssl/certs/server.crt
        client_tls_ca_file = /etc/ssl/ca.crt
        server_tls_ca_file = /etc/ssl/ca.crt
        default_pool_size = 75
        ignore_startup_parameters = extra_float_digits, options
        max_client_conn = 500
        pool_mode = transaction
        server_reset_query = DISCARD ALL
        stats_users = monitoring
      SPILO_CONFIGURATION: |
        bootstrap:
          dcs:
            postgresql:
              parameters:
                password_encryption: scram-sha-256
          initdb:
            - auth: scram-sha-256
            - encoding: UTF8
            - data-checksums
        postgresql:
          pg_hba:
            - local     all          all                       trust
            - local     replication  standby                   trust
            - hostssl   replication  standby     all           scram-sha-256
            - hostssl   all          +zalandos   127.0.0.1/32  pam
            - hostssl   all          +zalandos   ::1/128       pam
            - host      all          all         127.0.0.1/32  scram-sha-256
            - host      all          all         ::1/128       scram-sha-256
            - hostssl   all          +zalandos   all           pam
            - hostssl   all          all         all           scram-sha-256
            - hostnossl all          all         all           reject
  postgres2-exporter:
    image: bitnami/postgres-exporter:0.17.1
    restart: always
    environment:
      PG_EXPORTER_AUTO_DISCOVER_DATABASES: "true"
      DATA_SOURCE_NAME: "postgresql://postgres:iecie8Bo7gakair4@postgres2:5432/postgres"
  pgbouncer2-exporter:
    image: prometheuscommunity/pgbouncer-exporter:v0.11.0
    restart: always
    environment:
      PGBOUNCER_EXPORTER_CONNECTION_STRING: "postgres://monitoring:nohsi1thiediePai@postgres2:6432/pgbouncer"
  minio1:
    image: minio/minio:RELEASE.2025-05-24T17-08-30Z
    restart: always
    volumes:
      - ./data/minio1:/mnt/data
      - /etc/localtime:/etc/localtime
      - ./config/certs/minio1:/etc/ssl/certs
      - ./config/certs/ca/ca.crt:/etc/ssl/certs/CAs/ca.crt
    environment:
      TZ: Asia/Jakarta
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: ohc6OhbahC3Oobai
      MINIO_VOLUMES: https://minio{1...2}/mnt/data
      MINIO_STORAGE_CLASS_STANDARD: "EC:1"
      MINIO_PROMETHEUS_AUTH_TYPE: public
    command:
      - server
      - --certs-dir
      - /etc/ssl/certs
      - --console-address
      - ":9001"
  minio2:
    image: minio/minio:RELEASE.2025-05-24T17-08-30Z
    restart: always
    volumes:
      - ./data/minio2:/mnt/data
      - /etc/localtime:/etc/localtime
      - ./config/certs/minio2:/etc/ssl/certs
      - ./config/certs/ca/ca.crt:/etc/ssl/certs/CAs/ca.crt
    environment:
      TZ: Asia/Jakarta
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: ohc6OhbahC3Oobai
      MINIO_VOLUMES: https://minio{1...2}/mnt/data
      MINIO_STORAGE_CLASS_STANDARD: "EC:1"
      MINIO_PROMETHEUS_AUTH_TYPE: public
    command:
      - server
      - --certs-dir
      - /etc/ssl/certs
      - --console-address
      - ":9001"
  prometheus1:
    image: prom/prometheus:v3.4.1
    restart: always
    volumes:
      - ./config/certs/prometheus1:/etc/ssl/certs
      - ./config/prometheus:/etc/prom-config
      - ./data/prometheus1:/prom-data
      - ./config/certs/ca/ca.crt:/etc/ssl/ca.crt
      - /etc/localtime:/etc/localtime
    environment:
      TZ: Asia/Jakarta
    command:
      - '--config.file=/etc/prom-config/prometheus.yaml'
      - '--web.config.file=/etc/prom-config/web.yaml'
      - '--storage.tsdb.path=/prom-data'
      - '--storage.tsdb.retention.time=60d'
  prometheus2:
    image: prom/prometheus:v3.4.1
    restart: always
    volumes:
      - ./config/certs/prometheus2:/etc/ssl/certs
      - ./config/prometheus:/etc/prom-config
      - ./data/prometheus2:/prom-data
      - ./config/certs/ca/ca.crt:/etc/ssl/ca.crt
      - /etc/localtime:/etc/localtime
    environment:
      TZ: Asia/Jakarta
    command:
      - '--config.file=/etc/prom-config/prometheus.yaml'
      - '--web.config.file=/etc/prom-config/web.yaml'
      - '--storage.tsdb.path=/prom-data'
      - '--storage.tsdb.retention.time=60d'
#  grafana: